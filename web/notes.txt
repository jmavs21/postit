-- IMPORTS --
npx create-react-app web --template typescript
npm i @chakra-ui/core @emotion/core @emotion/styled emotion-theming
npm i --save react-router-dom
npm i --save @types/react-router-dom
npm i --save formik
npm i --save axios
npm i --save jwt-decode
npm i --save @types/jwt-decode
npm i --save immer
? npm i --save react-icons

-- INDEX SETUP --
index.tsx
  <BrowserRouter>
    <App />
  </BrowserRouter>

--- APP SETUP ----
App.tsx
  <ThemeProvider theme={theme}>
    <CSSReset />
    <Switch>
      <Route path="/" component={Register} />
    </Switch>
  </ThemeProvider>

--- FORMIK ----
pages/Register.tsx
  <Formik initialValues={{ email: '', password: '' }} onSubmit={(values) => {}}>
    {({ isSubmitting }) => (
      <Form>
        <InputField name="email" label="Email" />
        <InputField name="password" label="Password" type="password" />
        <Button type="submit" isLoading={isSubmitting}>Register</Button>
      </Form>
    )}
  </Formik>;
components/InputField.tsx
  <FormControl isInvalid={!!error}>
    <FormLabel htmlFor={field.name}>{label}</FormLabel>
    <Input {...field} {...props} id={field.name} placeholder={props.placeholder} />
    {error ? <FormErrorMessage>{error}</FormErrorMessage> : null}
  </FormControl>

--- MANUAL UPDATE STATE ----
const postsResCopy = JSON.parse(JSON.stringify(postsRes));
    postsResCopy.posts.push(...response.data.posts);
    setPostsRes({
      posts: postsResCopy.posts,
      hasMore: response.data.hasMore,
    });

const updatePostWithoutImmer = (
    postId: number,
    poinst: number,
    voteValue: number
  ) => {
    const postsResCopy: PostsRes = JSON.parse(JSON.stringify(postsRes));
    const postCopy: PostSnippet | undefined = postsResCopy.posts.find(
      (p) => p.id === postId
    );
    if (postCopy === undefined) return;
    postCopy.points = poinst;
    postCopy.voteValue = voteValue;

    setPostsRes({
      posts: postsResCopy.posts,
      hasMore: postsResCopy.hasMore,
    });
  };

--- IMMER UPDATE STATE ----
 const newPostsRes = produce(postsState, (draft) => {
        if (response.data) {
          draft.posts.push(...response.data.posts);
          draft.hasMore = response.data.hasMore;
        }
      });
      setPostsState(newPostsRes);

const updatePostVote = (
    postId: number,
    points: number,
    voteValue: number
  ) => {
    const newPostsRes = produce(postsState, (draft) => {
      const idx = draft.posts.findIndex((p) => p.id === postId);
      if (idx > -1) {
        const post = draft.posts[idx];
        post.points = points;
        post.voteValue = voteValue;
      }
    });

    console.log('before=', postsState);
    console.log('after =', newPostsRes);

    setPostsState(newPostsRes);
  };

updatePostVote(post.id, response.data, isUpVote ? 1 : -1);

// eslint-disable-line react-hooks/exhaustive-deps